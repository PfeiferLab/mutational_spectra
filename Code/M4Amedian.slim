// this version of the recipe is meant to be passed arguments through the -d flag:
// - fasta_file;
// - vcf_file;
// - mu;
//initializeMutationRate(2.36e-8);
initialize() {
	defineConstant("matrixFile", "slim_matrix.tsv");
	defineConstant("fasta_file",paste0("CM009259.2.merged.noheader.linearized.uppercase.fa")); 
	defineConstant("vcf_file", paste0("vcfs/", getSeed(), "_pop"));
	//defineConstant("fasta_file", paste0("test.fa"));
	initializeSLiMOptions(nucleotideBased=T);
	defineConstant("L", initializeAncestralNucleotides(fasta_file));
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0, fireUpTheMatrixMaker(matrixFile));
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-8);
}


1 {

    sim.addSubpop("p0", 9240);
    c = sim.chromosome;
    catn("Ancestral: " + paste(c.ancestralNucleotides(format="char")[0:20],sep=""));
    catn();
}


50000 {
	sim.addSubpopSplit("p34", 16275, p0);
	sim.addSubpopSplit("p12", 30241, p0);
	p0.setSubpopulationSize(0);
	p12.setMigrationRates(c(p34), c(9.589629972553818e-06));
	p34.setMigrationRates(c(p12), c(1.781874039938556e-05));
}


65082 {
	sim.addSubpopSplit("p3", 6033, p34);
	sim.addSubpopSplit("p4", 5710, p34);
	p34.setSubpopulationSize(0);
	p12.setMigrationRates(c(p3), c(8.266922390132602e-06));
	p3.setMigrationRates(c(p12), c(4.143875352229405e-05));
	p12.setMigrationRates(c(p4), c(3.968122747263649e-06));
	p4.setMigrationRates(c(p12), c(2.1015761821366022e-05));
	p3.setMigrationRates(c(p4), c(9.945300845350572e-06));
	p4.setMigrationRates(c(p3), c(1.0507880910683011e-05));
}


80559 {
	sim.addSubpopSplit("p1", 10528, p12);
	sim.addSubpopSplit("p2", 72001, p12);
	p12.setSubpopulationSize(0);
	p1.setMigrationRates(c(p2), c(7.313829787234043e-05));
	p2.setMigrationRates(c(p1), c(1.069429591255677e-05));
	p1.setMigrationRates(c(p3), c(7.5987841945288756e-06));
	p3.setMigrationRates(c(p1), c(1.3260401127134096e-05));
	p1.setMigrationRates(c(p4), c(2.849544072948328e-06));
	p4.setMigrationRates(c(p1), c(5.253940455341506e-06));
	p2.setMigrationRates(c(p3), c(2.6388522381633588e-06));
	p3.setMigrationRates(c(p2), c(3.149345267694348e-05));
	p2.setMigrationRates(c(p4), c(6.944347995166734e-07));
	p4.setMigrationRates(c(p2), c(8.756567425569177e-06));
}

98484 late() {

    g = c();
    pops= 0:3;
    samples= c(10528,72001, 6033,5710);
    for (x in pops){
		sim.subpopulations[x].individuals.genomes.outputVCF(paste0(vcf_file, x, '.vcf'), simplifyNucleotides=T);
	}	
        //g= c(g, sim.subpopulations[x].sampleIndividuals(samples[x]).genomes);
    //g.outputVCF(vcf_file,simplifyNucleotides=T);
	print("DONE, JOB COMPLETE ");
}

function (float)fireUpTheMatrixMaker(string filename){
	filer = readFile(filename);
	matter = c();
	for(line in filer){
		matter = c(matter,(asFloat(strsplit( strsplit(line, '\t')[1] , '\r' )[0] )));
	}
	mutMatrix = matrix(matter, nrow=64, byrow=T);
	return mutMatrix;
}